version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: moderator_db_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    # In production, you wouldn't typically expose the DB port to the host
    # ports:
    #   - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:7-alpine
    container_name: moderator_redis_prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: moderator_api_prod
    # The command is passed to the entrypoint script
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    # NO VOLUMES - The code is baked into the image
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: moderator_worker_prod
    command: echo "Celery worker starting..." # Replace with actual Celery command
    # NO VOLUMES
    env_file:
      - .env
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_healthy
    restart: always

volumes:
  postgres_data_prod:
    driver: local
